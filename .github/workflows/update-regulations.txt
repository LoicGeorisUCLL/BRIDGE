# .github/workflows/update-regulations.yml
name: Update Bridge Regulations and Questions
on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      regulations_url:
        description: 'URL of the regulations HTML page'
        required: true
        default: 'bridgeregulations.up.railway.app'
  # Scheduled trigger (daily at 3 AM UTC)
  # schedule:
  #   - cron: '0 3 * * *'

env:
  REGULATIONS_URL: ${{ github.event.inputs.regulations_url || secrets.REGULATIONS_URL }}

jobs:
  update-regulations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: 📦 Install dependencies
        run: |
          npm ci
          npm install -g tsx
          
      - name: 🔍 Check for regulation changes
        id: check_changes
        run: |
          # Download current regulations and compare with last known state
          curl -s "$REGULATIONS_URL" > current_regulations.html
          
          if [ -f "previous_regulations.html" ]; then
            # Compare with previous version
            if diff -q current_regulations.html previous_regulations.html > /dev/null 2>&1; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "📋 No changes detected in regulations"
            else
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "🔄 Changes detected in regulations"
            fi
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "🆕 First run - processing regulations"
          fi
          
          # Save current state for next comparison
          cp current_regulations.html previous_regulations.html
          
      - name: 🤖 Update questions and logic with new regulations
        if: steps.check_changes.outputs.has_changes == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔄 Updating questions and logic based on new regulations..."
          tsx regulation-scraper.ts "$REGULATIONS_URL"
          
      - name: 📋 Check generated files
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "📂 Files generated/updated:"
          
          if [ -f "public/locales/en/questions.json" ]; then
            echo "✅ Questions file generated: public/locales/en/questions.json"
            echo "📊 Number of questions: $(cat public/locales/en/questions.json | jq '.intakeQuestions | length')"
          else
            echo "❌ Questions file not found!"
            exit 1
          fi
          
          if [ -f "components/logic/logic.tsx" ]; then
            echo "✅ Logic file updated: components/logic/logic.tsx"
          else
            echo "❌ Logic file not found!"
            exit 1
          fi
          
          if [ -f "regulation-metadata.json" ]; then
            echo "✅ Metadata file created: regulation-metadata.json"
            echo "📅 Last updated: $(cat regulation-metadata.json | jq -r '.lastUpdated')"
            echo "🔢 Number of regulations: $(cat regulation-metadata.json | jq '.regulations | length')"
          else
            echo "❌ Metadata file not found!"
            exit 1
          fi
          
      - name: 🔨 Build and test
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "🏗️ Building application..."
          npm run build
          
          echo "🧪 Running tests..."
          npm run test
          
      - name: 🔍 Validate generated content
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "🔍 Validating generated content..."
          
          # Validate questions JSON structure
          echo "📋 Validating questions structure..."
          node -e "
            const questions = require('./public/locales/en/questions.json');
            if (!questions.intakeQuestions) {
              console.error('❌ Missing intakeQuestions object');
              process.exit(1);
            }
            
            const questionCount = Object.keys(questions.intakeQuestions).length;
            console.log('✅ Questions validation passed (' + questionCount + ' questions)');
            
            // Check each question has required structure
            for (const [key, q] of Object.entries(questions.intakeQuestions)) {
              if (!q.question || !Array.isArray(q.options) || q.options.length < 2) {
                console.error('❌ Invalid question structure at index ' + key);
                process.exit(1);
              }
            }
            console.log('✅ All questions have valid structure');
          "
          
          # Validate logic file has required exports
          echo "⚙️ Validating logic file..."
          node -e "
            const fs = require('fs');
            const logicContent = fs.readFileSync('./components/logic/logic.tsx', 'utf8');
            
            if (!logicContent.includes('generatePersonalizedTasks')) {
              console.error('❌ Logic file missing generatePersonalizedTasks function');
              process.exit(1);
            }
            
            if (!logicContent.includes('export')) {
              console.error('❌ Logic file missing export statement');
              process.exit(1);
            }
            
            console.log('✅ Logic file validation passed');
          "
          
      - name: 📊 Generate update summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "📊 Generating update summary..."
          
          # Create summary file
          cat > update_summary.md << EOF
          # 🤖 Automated Regulations Update Summary
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Regulations Source**: $REGULATIONS_URL
          
          ## 📋 Files Updated
          - ✅ Questions: \`public/locales/en/questions.json\`
          - ✅ Logic: \`components/logic/logic.tsx\`
          - ✅ Metadata: \`regulation-metadata.json\`
          
          ## 📊 Statistics
          - **Questions Generated**: $(cat public/locales/en/questions.json | jq '.intakeQuestions | length')
          - **Regulations Processed**: $(cat regulation-metadata.json | jq '.regulations | length')
          - **Last Updated**: $(cat regulation-metadata.json | jq -r '.lastUpdated')
          
          ## 🔍 Generated Questions
          $(cat public/locales/en/questions.json | jq -r '.intakeQuestions | to_entries[] | "- **Q\(.key + 1)**: \(.value.question)"')
          
          ---
          *This update was generated automatically by GitHub Actions*
          EOF
          
          echo "📄 Update summary created:"
          cat update_summary.md
          
      - name: 📤 Commit and push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all relevant files
          git add components/logic/logic.tsx
          git add public/locales/en/questions.json
          git add regulation-metadata.json
          git add previous_regulations.html
          git add update_summary.md
          
          # Create detailed commit message
          cat > commit_message.txt << EOF
          🤖 Auto-update: Regulations, questions and logic updated
          
          - Generated $(cat public/locales/en/questions.json | jq '.intakeQuestions | length') intake questions
          - Updated logic based on $(cat regulation-metadata.json | jq '.regulations | length') regulations
          - Source: $REGULATIONS_URL
          - Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          Files updated:
          - public/locales/en/questions.json
          - components/logic/logic.tsx
          - regulation-metadata.json
          EOF
          
          git commit -F commit_message.txt
          git push
          
          echo "✅ Changes committed and pushed successfully!"
          
      - name: 🎉 Success notification
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "🎉 Regulations update completed successfully!"
          echo "📋 Questions: $(cat public/locales/en/questions.json | jq '.intakeQuestions | length') generated"
          echo "⚙️ Logic: Updated based on current regulations"
          echo "📊 Metadata: Saved for future comparisons"
          
      - name: ℹ️ No changes notification
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "ℹ️ No changes detected in regulations"
          echo "📋 Current questions and logic remain up to date"